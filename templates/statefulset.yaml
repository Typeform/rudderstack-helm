apiVersion: {{ include "statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ include "rudderstack.fullname" . }}
  labels:
    {{- include "rudderstack.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "rudderstack.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "rudderstack.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "rudderstack.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/rudder-config: {{ .Files.Get "rudder-config.toml" | sha256sum }}
        checksum/rudder-bigquery-credentials: {{ .Files.Get "bigquery-credentials.json" | sha256sum }}
        checksum/postgresql-config: {{ .Files.Get "postgresql.conf" | sha256sum }} 
        checksum/pg-hba-config: {{ .Files.Get "pg_hba.conf" | sha256sum }}
    spec:
    {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - configMap:
            defaultMode: 420
            name: {{ include "backend.fullname" . }}-config
          name: backend-config-volume
        - configMap:
            defaultMode: 444
            name: {{ include "statsd.fullname" . }}-config
          name: statsd-config-volume
        - configMap:
            defaultMode: 444
            name: {{ include "postgresql.fullname" . }}-config
          name: postgresql-config-volume

      containers:
      - name: {{ include "backend.name" . }}
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.version }}"
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        volumeMounts:
        - mountPath: {{ .Values.backend.config.mountPath }}
          name: backend-config-volume
        - mountPath: {{ .Values.backend.persistence.mountPath }}
          name: {{ include "backend.name" . }}-data
        ports:
          - name: backend
            containerPort: {{ .Values.backend.service.port }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.backend.service.port }}
          initialDelaySeconds: 120
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.backend.service.port }}
        resources:
          {{- toYaml .Values.backend.resources | nindent 10 }}
        env:
          {{- if .Values.backend.extraEnvVars }}
            {{- .Values.backend.extraEnvVars | toYaml | nindent 10 }}
          {{- end }}
          - name: CONFIG_BACKEND_TOKEN
            value: {{ .Values.rudderWorkspaceToken }}      
          - name: DEST_TRANSFORM_URL
            value: "http://{{ include "transformer.fullname" . }}:{{ .Values.transformer.service.port}}"
          - name: JOBS_DB_HOST
            value: "localhost"
          - name: JOBS_DB_USER
            value: "{{ .Values.postgresql.postgresqlUsername }}"
          - name: JOBS_DB_PORT
            value: "{{ .Values.postgresql.service.port }}"
          - name: JOBS_DB_DB_NAME
            value: "{{ .Values.postgresql.postgresqlDatabase }}"
          - name: JOBS_DB_PASSWORD
            value: "{{ .Values.postgresql.postgresqlPassword }}"
          - name: STATSD_SERVER_URL
            value: "localhost:{{ .Values.statsd.service.port }}"
        command: ["/bin/sh"]
        args: ["-c", "./build/wait-for $(JOBS_DB_HOST):$(JOBS_DB_PORT) -- go run -mod=vendor main.go"] 
        
      - name: {{ include "postgresql.name" . }}
        image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.version }}"
        imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
        {{- if .Values.postgresql.resources }}
        resources: 
          {{- toYaml .Values.postgresql.resources | nindent 10 }}
        {{- end }}
        env:
        - name: POSTGRES_USER
          value: "{{ .Values.postgresql.postgresqlUsername }}"
        - name: POSTGRES_PASSWORD
          value: "{{ .Values.postgresql.postgresqlPassword }}"
        - name: POSTGRES_DB
          value: "{{ .Values.postgresql.postgresqlDatabase }}"
        - name: PGDATA
          value: "{{ .Values.postgresql.persistence.mountPath }}/pgdata"   
        # args: ["-c","config_file={{ .Values.postgresql.config.mountPath }}/postgresql.conf","-c","hba_file={{ .Values.postgresql.config.mountPath }}/pg_hba.conf"]
        volumeMounts:
        - mountPath: {{ .Values.postgresql.config.mountPath }}
          name: postgresql-config-volume
        - mountPath: {{ .Values.postgresql.persistence.mountPath }}
          name: {{ include "postgresql.name" . }}-data
        ports:
        - name: postgresql
          containerPort: {{ .Values.postgresql.service.port }}
      - name: {{ include "statsd.name" . }}
        image: "{{ .Values.statsd.image.repository }}@{{ .Values.statsd.image.digest }}"
        imagePullPolicy: {{ .Values.statsd.image.pullPolicy }}
        {{- if .Values.statsd.resources }}
        resources: 
          {{- toYaml .Values.statsd.resources | nindent 10 }}
        {{- end }}
        command: ["node"]	
        args: ["stats.js", "{{ .Values.statsd.config.mountPath }}/config.js"]	
        volumeMounts:
        - mountPath: {{ .Values.statsd.config.mountPath }}
          name: statsd-config-volume
        ports:
        - name: statsd
          containerPort: {{ .Values.statsd.service.port }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
  
  volumeClaimTemplates:
    - metadata:
        name: {{ include "backend.name" . }}-data
    {{- with .Values.backend.persistence.annotations }}
      annotations:
      {{- range $key, $value := . }}
        {{ $key }}: {{ $value }}
      {{- end }}
    {{- end }}
      spec:
        storageClassName: {{ .Values.global.storageClass }}
        accessModes:
        {{- range .Values.backend.persistence.accessModes }}
         - {{ . | quote }}
        {{- end }}
        resources:
          requests:
           storage: {{ .Values.backend.persistence.size | quote }}
    - metadata:
        name: {{ include "postgresql.name" . }}-data
      {{- with .Values.postgresql.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        storageClassName: {{ .Values.global.storageClass }}
        accessModes:
        {{- range .Values.postgresql.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.postgresql.persistence.size | quote }}
